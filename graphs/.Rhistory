s <- -grad_Q(x_start)
for(j in 1:iter){
#Do line search
alpha_before <-0 #just set this to zero - not sure if the right thing.
alpha <- alpha_start
for(i in 1:iter_alpha){
alpha_after <- alpha - (sum(grad_Q(x_new + alpha*s)*s)*(alpha_before - alpha))/
(sum(grad_Q(x_new + alpha_before*s)*s) - sum(grad_Q(x_new +alpha*s)*s))
alpha_before <- alpha
alpha<- alpha_after
if(abs(alpha - alpha_before)<0.00000000001){break} #to prevent going to inf
}
print(j)
x <- x_new
x_new <- x + alpha*s
tmp <- grad_Q(x_new)
s <- -tmp + (sum(tmp^2)/sum(grad_Q(x)^2))*s
print(x_new)
print(s)
tmp <- sum((x_new - x)^2)
if(tmp ==0){return(x_new)}
}
return(x_new)
}
Fletcher_Reeves_Conjugate_Q(10,100,x_start,1)
Fletcher_Reeves_Conjugate_Q <- function(iter_alpha,iter,x_start,alpha_start){
x_new <- x_start
s <- -grad_Q(x_start)
for(j in 1:iter){
#Do line search
alpha_before <-0 #just set this to zero - not sure if the right thing.
alpha <- alpha_start
for(i in 1:iter_alpha){
alpha_after <- alpha - (sum(grad_Q(x_new + alpha*s)*s)*(alpha_before - alpha))/
(sum(grad_Q(x_new + alpha_before*s)*s) - sum(grad_Q(x_new +alpha*s)*s))
alpha_before <- alpha
alpha<- alpha_after
if(abs(alpha - alpha_before)<0.0){break} #to prevent going to inf
}
x <- x_new
x_new <- x + alpha*s
tmp <- grad_Q(x_new)
s <- -tmp + (sum(tmp^2)/sum(grad_Q(x)^2))*s
tmp <- sum((x_new - x)^2)
if(tmp ==0){return(x_new)}
}
return(x_new)
}
Fletcher_Reeves_Conjugate_Q(10,100,x_start,1)
Fletcher_Reeves_Conjugate_Q <- function(iter_alpha,iter,x_start,alpha_start){
x_new <- x_start
s <- -grad_Q(x_start)
for(j in 1:iter){
#Do line search
alpha_before <-0 #just set this to zero - not sure if the right thing.
alpha <- alpha_start
for(i in 1:iter_alpha){
alpha_after <- alpha - (sum(grad_Q(x_new + alpha*s)*s)*(alpha_before - alpha))/
(sum(grad_Q(x_new + alpha_before*s)*s) - sum(grad_Q(x_new +alpha*s)*s))
alpha_before <- alpha
alpha<- alpha_after
if(abs(alpha - alpha_before)<0.0){break} #to prevent going to inf
}
x <- x_new
x_new <- x + alpha*s
tmp <- grad_Q(x_new)
s <- -tmp + (sum(tmp^2)/sum(grad_Q(x)^2))*s
tmp <- sum((x_new - x)^2)
print(x_new)
if(tmp ==0){return(x_new)}
}
return(x_new)
}
Fletcher_Reeves_Conjugate_Q(10,100,x_start,1)
Fletcher_Reeves_Conjugate_Q(10,100,x_start,1)
Fletcher_Reeves_Conjugate_Q(10,100,x_start,1)
Fletcher_Reeves_Conjugate_Q <- function(iter_alpha,iter,x_start,alpha_start){
x_new <- x_start
s <- -grad_Q(x_start)
for(j in 1:iter){
#Do line search
alpha_before <-0 #just set this to zero - not sure if the right thing.
alpha <- alpha_start
for(i in 1:iter_alpha){
alpha_after <- alpha - (sum(grad_Q(x_new + alpha*s)*s)*(alpha_before - alpha))/
(sum(grad_Q(x_new + alpha_before*s)*s) - sum(grad_Q(x_new +alpha*s)*s))
alpha_before <- alpha
alpha<- alpha_after
if(abs(alpha - alpha_before)<0.00001){break} #to prevent going to inf
}
print(j)
x <- x_new
x_new <- x + alpha*s
tmp <- grad_Q(x_new)
s <- -tmp + (sum(tmp^2)/sum(grad_Q(x)^2))*s
print(x_new)
print(s)
tmp <- sum((x_new - x)^2)
if(tmp ==0){return(x_new)}
}
return(x_new)
}
Fletcher_Reeves_Conjugate_Q(10,100,x_start,1)
Fletcher_Reeves_Conjugate_Q <- function(iter_alpha,iter,x_start,alpha_start){
x_new <- x_start
s <- -grad_Q(x_start)
for(j in 1:iter){
#Do line search
alpha_before <-0 #just set this to zero - not sure if the right thing.
alpha <- alpha_start
for(i in 1:iter_alpha){
alpha_after <- alpha - (sum(grad_Q(x_new + alpha*s)*s)*(alpha_before - alpha))/
(sum(grad_Q(x_new + alpha_before*s)*s) - sum(grad_Q(x_new +alpha*s)*s))
alpha_before <- alpha
alpha<- alpha_after
if(abs(alpha - alpha_before)<0.00001 | (alpha - alpha_before) == inf){break} #to prevent going to inf
}
print(j)
x <- x_new
x_new <- x + alpha*s
tmp <- grad_Q(x_new)
s <- -tmp + (sum(tmp^2)/sum(grad_Q(x)^2))*s
print(x_new)
print(s)
tmp <- sum((x_new - x)^2)
if(tmp ==0){return(x_new)}
}
return(x_new)
}
Fletcher_Reeves_Conjugate_Q(10,100,x_start,1)
help(inf)
Fletcher_Reeves_Conjugate_Q <- function(iter_alpha,iter,x_start,alpha_start){
x_new <- x_start
s <- -grad_Q(x_start)
for(j in 1:iter){
#Do line search
alpha_before <-0 #just set this to zero - not sure if the right thing.
alpha <- alpha_start
for(i in 1:iter_alpha){
alpha_after <- alpha - (sum(grad_Q(x_new + alpha*s)*s)*(alpha_before - alpha))/
(sum(grad_Q(x_new + alpha_before*s)*s) - sum(grad_Q(x_new +alpha*s)*s))
alpha_before <- alpha
alpha<- alpha_after
if(abs(alpha - alpha_before)<0.00001 | (alpha - alpha_before) == Inf){break} #to prevent going to inf
}
print(j)
x <- x_new
x_new <- x + alpha*s
tmp <- grad_Q(x_new)
s <- -tmp + (sum(tmp^2)/sum(grad_Q(x)^2))*s
print(x_new)
print(s)
tmp <- sum((x_new - x)^2)
if(tmp ==0){return(x_new)}
}
return(x_new)
}
Fletcher_Reeves_Conjugate_Q(10,100,x_start,1)
Fletcher_Reeves_Conjugate_Q <- function(iter_alpha,iter,x_start,alpha_start){
x_new <- x_start
s <- -grad_Q(x_start)
for(j in 1:iter){
#Do line search
alpha_before <-0 #just set this to zero - not sure if the right thing.
alpha <- alpha_start
for(i in 1:iter_alpha){
alpha_after <- alpha - (sum(grad_Q(x_new + alpha*s)*s)*(alpha_before - alpha))/
(sum(grad_Q(x_new + alpha_before*s)*s) - sum(grad_Q(x_new +alpha*s)*s))
alpha_before <- alpha
alpha<- alpha_after
if((alpha - alpha_before) == Inf){break}
if(is.na(alpha - alpha_before)){break}
if(abs(alpha - alpha_before)<0.00001){break}
}
if(is.na(alpha)){break}
if(alpha == Inf){break}
x <- x_new
x_new <- x + alpha*s
tmp <- grad_Q(x_new)
s <- -tmp + (sum(tmp^2)/sum(grad_Q(x)^2))*s
print(x_new)
print(s)
tmp <- sum((x_new - x)^2)
if(tmp ==0){return(x_new)}
}
return(x_new)
}
Fletcher_Reeves_Conjugate_Q(10,100,x_start,1)
debugSource('~/Academics/UCLA_Academics/Classes/Stats_202B/Homeworks/ProblemSet_5/Q5.R', echo=TRUE)
debugSource('~/Academics/UCLA_Academics/Classes/Stats_202B/Homeworks/ProblemSet_5/Q5.R', echo=TRUE)
(alpha - alpha_before) == Inf
debugSource('~/Academics/UCLA_Academics/Classes/Stats_202B/Homeworks/ProblemSet_5/Q5.R', echo=TRUE)
debugSource('~/Academics/UCLA_Academics/Classes/Stats_202B/Homeworks/ProblemSet_5/Q5.R', echo=TRUE)
debugSource('~/Academics/UCLA_Academics/Classes/Stats_202B/Homeworks/ProblemSet_5/Q5.R', echo=TRUE)
debugSource('~/Academics/UCLA_Academics/Classes/Stats_202B/Homeworks/ProblemSet_5/Q5.R', echo=TRUE)
etcher_Reeves_Conjugate_Q <- function(iter_alpha,iter,x_start,alpha_start){
x_new <- x_start
s <- -grad_Q(x_start)
for(j in 1:iter){
#Do line search
alpha_before <-0 #just set this to zero - not sure if the right thing.
alpha <- alpha_start
for(i in 1:iter_alpha){
alpha_after <- alpha - (sum(grad_Q(x_new + alpha*s)*s)*(alpha_before - alpha))/
(sum(grad_Q(x_new + alpha_before*s)*s) - sum(grad_Q(x_new +alpha*s)*s))
alpha_before <- alpha
alpha<- alpha_after
if((alpha - alpha_before) == Inf){break}
if(is.na(alpha - alpha_before)){break}
if(abs(alpha - alpha_before)<0.00001){break}
}
if(is.na(alpha)){break}
if(alpha == Inf){break}
x <- x_new
x_new <- x + alpha*s
tmp <- grad_Q(x_new)
s <- -tmp + (sum(tmp^2)/sum(grad_Q(x)^2))*s
print(x_new)
print(s)
tmp <- sum((x_new - x)^2)
if(tmp ==0){return(x_new)}
}
return(x_new)
}
Fletcher_Reeves_Conjugate_Q(10,100,x_start,1)
debugSource('~/Academics/UCLA_Academics/Classes/Stats_202B/Homeworks/ProblemSet_5/Q5.R', echo=TRUE)
(sum(grad_Q(x_new + alpha*s)*s)*(alpha_before - alpha))
(sum(grad_Q(x_new + alpha_before*s)*s) - sum(grad_Q(x_new +alpha*s)*s))
source('~/Academics/UCLA_Academics/Classes/Stats_202B/Homeworks/ProblemSet_5/Q5.R', echo=TRUE)
source('~/Academics/UCLA_Academics/Classes/Stats_202B/Homeworks/ProblemSet_5/Q5.R', echo=TRUE)
debugSource('~/Academics/UCLA_Academics/Classes/Stats_202B/Homeworks/ProblemSet_5/Q5.R', echo=TRUE)
n
n
debugSource('~/Academics/UCLA_Academics/Classes/Stats_202B/Homeworks/ProblemSet_5/Q5.R', echo=TRUE)
debugSource('~/Academics/UCLA_Academics/Classes/Stats_202B/Homeworks/ProblemSet_5/Q5.R', echo=TRUE)
Fletcher_Reeves_Conjugate_Q <- function(iter_alpha,iter,x_start,alpha_start){
x_new <- x_start
s <- -grad_Q(x_start)
for(j in 1:iter){
#Do line search
alpha_before <-0 #just set this to zero - not sure if the right thing.
alpha <- alpha_start
for(i in 1:iter_alpha){
if(abs(alpha - alpha_before)<0.0000001){break}
alpha_after <- alpha - (sum(grad_Q(x_new + alpha*s)*s)*(alpha_before - alpha))/
(sum(grad_Q(x_new + alpha_before*s)*s) - sum(grad_Q(x_new +alpha*s)*s))
alpha_before <- alpha
alpha<- alpha_after
}
if(is.na(alpha)){break}
if(alpha == Inf){break}
x <- x_new
x_new <- x + alpha*s
tmp <- grad_Q(x_new)
s <- -tmp + (sum(tmp^2)/sum(grad_Q(x)^2))*s
print(x_new)
print(s)
tmp <- grad_Q(x_new)
if(tmp ==0){return(x_new)}
}
return(x_new)
}
Fletcher_Reeves_Conjugate_Q(10,100,x_start,1)
source('~/Academics/UCLA_Academics/Classes/Stats_202B/Homeworks/ProblemSet_5/Q5.R', echo=TRUE)
Fletcher_Reeves_Conjugate_Q(10,100,x_start,1)
Fletcher_Reeves_Conjugate_Q <- function(iter_alpha,iter,x_start,alpha_start){
x_new <- x_start
s <- -grad_Q(x_start)
for(j in 1:iter){
#Do line search
alpha_before <-0 #just set this to zero - not sure if the right thing.
alpha <- alpha_start
for(i in 1:iter_alpha){
if(abs(alpha - alpha_before)<0.0000001){break}
alpha_after <- alpha - (sum(grad_Q(x_new + alpha*s)*s)*(alpha_before - alpha))/
(sum(grad_Q(x_new + alpha_before*s)*s) - sum(grad_Q(x_new +alpha*s)*s))
alpha_before <- alpha
alpha<- alpha_after
}
if(is.na(alpha)){break}
if(alpha == Inf){break}
x <- x_new
x_new <- x + alpha*s
tmp <- grad_Q(x_new)
s <- -tmp + (sum(tmp^2)/sum(grad_Q(x)^2))*s
print(j)
print(x_new)
tmp <- grad_Q(x_new)
if(sum(tmp) ==0){return(x_new)}
}
return(x_new)
}
Fletcher_Reeves_Conjugate_Q(10,100,x_start,1)
BFGS_method_Q(20,x_start,H_start)
opt.out <- optim(par =x_start, fn = Q)
opt.out$par
BFGS_method_Q <- function(iter,x_start,H_start,tolerance){# uses log(n) as learning rate, based on trial and error
x_after <- x_start
H <- H_start
for(i in 1:iter){
print(x_after)
x_before <- x_after
x_after <- x_before -(max(1/log(n),tolerance/2))*solve(H)%*%grad_Q(x_before)
grad_g <- grad_Q(x_after) - grad_Q(x_before)
delta_x <- x_after - x_before
H <- H + (grad_g%*%t(grad_g))/sum(grad_g*delta_x)
-(H%*%delta_x%*%t(delta_x)%*%H)/(sum(delta_x*(H%*%delta_x)))
}
return(x_after)
}
BFGS_method_Q(20,x_start,H_start,0.01)
BFGS_method_Q <- function(iter,x_start,H_start,tolerance){# uses log(n) as learning rate, based on trial and error
x_after <- x_start
H <- H_start
for(i in 1:iter){
print(x_after)
x_before <- x_after
x_after <- x_before -(max(1/log(i),tolerance/2))*solve(H)%*%grad_Q(x_before)
grad_g <- grad_Q(x_after) - grad_Q(x_before)
delta_x <- x_after - x_before
H <- H + (grad_g%*%t(grad_g))/sum(grad_g*delta_x)
-(H%*%delta_x%*%t(delta_x)%*%H)/(sum(delta_x*(H%*%delta_x)))
}
return(x_after)
}
BFGS_method_Q(20,x_start,H_start,0.01)
BFGS_method_Q <- function(iter,x_start,H_start,tolerance){# uses 1/log(n) as learning rate, based on trial and error
x_after <- x_start
H <- H_start
for(i in 1:iter){
print(x_after)
x_before <- x_after
x_after <- x_before -(max(1/log(i+1),tolerance/2))*solve(H)%*%grad_Q(x_before)
grad_g <- grad_Q(x_after) - grad_Q(x_before)
delta_x <- x_after - x_before
H <- H + (grad_g%*%t(grad_g))/sum(grad_g*delta_x)
-(H%*%delta_x%*%t(delta_x)%*%H)/(sum(delta_x*(H%*%delta_x)))
}
return(x_after)
}
BFGS_method_Q(20,x_start,H_start,0.01)
log(20)
BFGS_method_Q(100,x_start,H_start)
BFGS_method_Q(100,x_start,H_start,0.01)
log(100)
log(1000)
BFGS_method_Q(1000,x_start,H_start,0.01)
BFGS_method_Q <- function(iter,x_start,H_start,tolerance){# uses 1/n as learning rate, based on trial and error
x_after <- x_start
H <- H_start
for(i in 1:iter){
print(x_after)
x_before <- x_after
x_after <- x_before -(max(1/i,tolerance/2))*solve(H)%*%grad_Q(x_before)
grad_g <- grad_Q(x_after) - grad_Q(x_before)
delta_x <- x_after - x_before
H <- H + (grad_g%*%t(grad_g))/sum(grad_g*delta_x)
-(H%*%delta_x%*%t(delta_x)%*%H)/(sum(delta_x*(H%*%delta_x)))
}
return(x_after)
}
BFGS_method_Q(20,x_start,H_start,0.01)
BFGS_method_Q(100,x_start,H_start,0.01)
BFGS_method_Q(1000,x_start,H_start,0.01)
BFGS_method_Q <- function(iter,x_start,H_start,tolerance){# uses 1/n^0.01 as learning rate, based on trial and error
x_after <- x_start
H <- H_start
for(i in 1:iter){
print(x_after)
x_before <- x_after
x_after <- x_before -(max(1/i^0.1))*solve(H)%*%grad_Q(x_before) ## learning rate chosen for this problem
grad_g <- grad_Q(x_after) - grad_Q(x_before)
delta_x <- x_after - x_before
H <- H + (grad_g%*%t(grad_g))/sum(grad_g*delta_x)
-(H%*%delta_x%*%t(delta_x)%*%H)/(sum(delta_x*(H%*%delta_x)))
}
return(x_after)
}
BFGS_method_Q(20,x_start,H_start,0.01)
BFGS_method_Q(20,x_start,H_start,0.01)
BFGS_method_Q(100,x_start,H_start,0.01)
BFGS_method_Q(1000,x_start,H_start,0.01)
BFGS_method_Q <- function(iter,x_start,H_start,tolerance){# uses 1/n^0.01 as learning rate, based on trial and error
x_after <- x_start
H <- H_start
for(i in 1:iter){
print(x_after)
x_before <- x_after
x_after <- x_before -(max(1/i^0.2))*solve(H)%*%grad_Q(x_before) ## learning rate chosen for this problem
grad_g <- grad_Q(x_after) - grad_Q(x_before)
delta_x <- x_after - x_before
H <- H + (grad_g%*%t(grad_g))/sum(grad_g*delta_x)
-(H%*%delta_x%*%t(delta_x)%*%H)/(sum(delta_x*(H%*%delta_x)))
}
return(x_after)
}
BFGS_method_Q(20,x_start,H_start,0.01)
BFGS_method_Q(20,x_start,H_start,0.01)
BFGS_method_Q <- function(iter,x_start,H_start,tolerance){# uses 1/n^0.01 as learning rate, based on trial and error
x_after <- x_start
H <- H_start
for(i in 1:iter){
print(x_after)
x_before <- x_after
x_after <- x_before -(max(1/i^0.1))*solve(H)%*%grad_Q(x_before) ## learning rate chosen for this problem
grad_g <- grad_Q(x_after) - grad_Q(x_before)
delta_x <- x_after - x_before
H <- H + (grad_g%*%t(grad_g))/sum(grad_g*delta_x)
-(H%*%delta_x%*%t(delta_x)%*%H)/(sum(delta_x*(H%*%delta_x)))
}
return(x_after)
}
BFGS_method_Q(20,x_start,H_start,0.01)
BFGS_method_Q <- function(iter,x_start,H_start,tolerance){# uses 1/n^0.01 as learning rate, based on trial and error
x_after <- x_start
H <- H_start
for(i in 1:iter){
print(x_after)
x_before <- x_after
x_after <- x_before -(max(1/i^0.05))*solve(H)%*%grad_Q(x_before) ## learning rate chosen for this problem
grad_g <- grad_Q(x_after) - grad_Q(x_before)
delta_x <- x_after - x_before
H <- H + (grad_g%*%t(grad_g))/sum(grad_g*delta_x)
-(H%*%delta_x%*%t(delta_x)%*%H)/(sum(delta_x*(H%*%delta_x)))
}
return(x_after)
}
BFGS_method_Q(20,x_start,H_start,0.01)
BFGS_method_Q <- function(iter,x_start,H_start,tolerance){# uses 1/n^0.01 as learning rate, based on trial and error
x_after <- x_start
H <- H_start
for(i in 1:iter){
print(x_after)
x_before <- x_after
x_after <- x_before -(max(1/i^0.01))*solve(H)%*%grad_Q(x_before) ## learning rate chosen for this problem
grad_g <- grad_Q(x_after) - grad_Q(x_before)
delta_x <- x_after - x_before
H <- H + (grad_g%*%t(grad_g))/sum(grad_g*delta_x)
-(H%*%delta_x%*%t(delta_x)%*%H)/(sum(delta_x*(H%*%delta_x)))
}
return(x_after)
}
BFGS_method_Q(20,x_start,H_start,0.01)
BFGS_method_Q(100,x_start,H_start,0.01)
BFGS_method_Q(1000,x_start,H_start,0.01)
#BFGS_method_Q(20,x_start,H_start,0.01)
#BFGS_method_Q(100,x_start,H_start,0.01)
round(BFGS_method_Q(1000,x_start,H_start,0.01),3)
#BFGS_method_Q(20,x_start,H_start,0.01)
#BFGS_method_Q(100,x_start,H_start,0.01)
round(BFGS_method_Q(1000,x_start,H_start,0.01),2)
round(BFGS_method_Q(20,x_start,H_start,0.01),2)
round(BFGS_method_Q(30,x_start,H_start,0.01),2)
round(BFGS_method_Q(40,x_start,H_start,0.01),2)
BFGS_method_Q <- function(iter,x_start,H_start,tolerance){# uses 1/n^0.01 as learning rate, based on trial and error
x_after <- x_start
H <- H_start
for(i in 1:iter){
print(x_after)
x_before <- x_after
x_after <- x_before -(max(1/i^0.05))*solve(H)%*%grad_Q(x_before) ## learning rate chosen for this problem
grad_g <- grad_Q(x_after) - grad_Q(x_before)
delta_x <- x_after - x_before
H <- H + (grad_g%*%t(grad_g))/sum(grad_g*delta_x)
-(H%*%delta_x%*%t(delta_x)%*%H)/(sum(delta_x*(H%*%delta_x)))
}
return(x_after)
}
round(BFGS_method_Q(40,x_start,H_start,0.01),2)
round(BFGS_method_Q(50,x_start,H_start,0.01),2)
round(BFGS_method_Q(50,x_start,H_start,0.01),1)
round(BFGS_method_Q(50,x_start,H_start,0.01),2)
round(BFGS_method_Q(20,x_start,H_start,0.01),1)
round(BFGS_method_Q(10,x_start,H_start,0.01),1)
round(BFGS_method_Q(15,x_start,H_start,0.01),1)
Q <- function(par){
(1/2)*t(par)%*%matrix(c(2,1,1,1),nrow=2)%*%par + matrix(c(1,1),nrow=1)%*%par}
grad_Q <- function(par){
tmp <- c(0,0)
tmp[1] <- 2*par[1] + par[2]  + 1
tmp[2] <- par[2] + par[1] + 1
return(tmp)
}
x_start = c(0,0)
H_start <- diag(1,2)
opt.out <- optim(par =x_start, fn = Q)
print(paste("The minimum using optim was: ",opt.out$par))
print("The minimum using optim was: ")
print(opt.out$par)
rm(list=ls())
rm(list=ls())
setwd("C:/Users/Duncan/Documents/Academics/UCLA_Academics/Classes/Stats_202B/CyclingDataAnalysis")
library('ProjectTemplate')
load.project()
getwd()
source('~/Academics/UCLA_Academics/Classes/Stats_202B/CyclingDataAnalysis/src/01_Graphical_Analysis.R', echo=TRUE)
setwd("data")
getwd()
setwd("..")
setwd("data")
files <- list.files()
files <- files[-which((files=="README.md"))]
cache(variable = "files")
setwd()
getwd()
setwd("..")
cache(variable = "files")
source('~/Academics/UCLA_Academics/Classes/Stats_202B/CyclingDataAnalysis/src/01_Graphical_Analysis.R', echo=TRUE)
help(data.frame)
help(lubridate)
files[1]
files[length(files)]
